# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=header_card_306e4f7563
ROOST_METHOD_SIG_HASH=header_card_8ce2bfdc6d

Scenario 1: Test for Correct Title and Description
Details:
  TestName: test_header_card_correct_title_description
  Description: This test will verify that the header card function correctly extracts and uses the title and description from the application's toml file.
Execution:
  Arrange: Mock the q.app.toml['App']['Title'] and q.app.toml['App']['Description'] to specified values.
  Act: Invoke header_card function.
  Assert: Check whether the returned card's title and subtitle match the mocked values.
Validation:
  Rational: Ensuring the function correctly reads and uses the title and description is essential for the application's branding and user experience.

Scenario 2: Test for Correct Default Logo
Details:
  TestName: test_header_card_default_logo
  Description: This test will verify that the header card function correctly uses the default logo URL when the LOGO environment variable is not set.
Execution:
  Arrange: Ensure that the LOGO environment variable is not set.
  Act: Invoke header_card function.
  Assert: Check whether the returned card's image URL matches the default logo URL.
Validation:
  Rational: Ensuring the function correctly uses the default logo when the LOGO variable is not set is important for maintaining a consistent visual identity for the application.

Scenario 3: Test for Correct Custom Logo
Details:
  TestName: test_header_card_custom_logo
  Description: This test will verify that the header card function correctly uses the custom logo URL from the LOGO environment variable when it is set.
Execution:
  Arrange: Set the LOGO environment variable to a specified URL.
  Act: Invoke header_card function.
  Assert: Check whether the returned card's image URL matches the URL set in the LOGO environment variable.
Validation:
  Rational: Ensuring the function correctly uses a custom logo when provided allows for customization and branding of the application.

Scenario 4: Test for Correct Box Value
Details:
  TestName: test_header_card_box_value
  Description: This test will verify that the header card function correctly uses the box value 'header'.
Execution:
  Arrange: No special arrangement needed.
  Act: Invoke header_card function.
  Assert: Check whether the returned card's box value is 'header'.
Validation:
  Rational: The box value 'header' determines the position of the card on the page. It's important to ensure that the header card function correctly sets this value.
"""

# ********RoostGPT********
import os
import pytest
from h2o_wave import ui, Q
from unittest.mock import patch
from cards import header_card

class Test_HeaderCard:

    @pytest.mark.regression
    def test_header_card_correct_title_description(self):
        # Arrange
        app_title = "Test Title"
        app_description = "Test Description"
        q = Q(app={'toml': {'App': {'Title': app_title, 'Description': app_description}}})

        # Act
        card = header_card(q)

        # Assert
        assert card.title == app_title
        assert card.subtitle == app_description

    @pytest.mark.regression
    def test_header_card_default_logo(self):
        # Arrange
        default_logo = "https://h2o.ai/content/experience-fragments/h2o/us/en/site/header/master/_jcr_content/root/container/header_copy/logo.coreimg.svg/1696007565253/h2o-logo.svg"
        q = Q(app={'toml': {'App': {'Title': '', 'Description': ''}}})
        if 'LOGO' in os.environ:
            del os.environ['LOGO']

        # Act
        card = header_card(q)

        # Assert
        assert card.image == default_logo

    @pytest.mark.regression
    def test_header_card_custom_logo(self):
        # Arrange
        custom_logo = "https://test.com/logo.svg"
        q = Q(app={'toml': {'App': {'Title': '', 'Description': ''}}})
        os.environ['LOGO'] = custom_logo

        # Act
        card = header_card(q)

        # Assert
        assert card.image == custom_logo

    @pytest.mark.regression
    def test_header_card_box_value(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': '', 'Description': ''}}})

        # Act
        card = header_card(q)

        # Assert
        assert card.box == 'header'
