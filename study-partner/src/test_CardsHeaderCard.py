# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=header_card_306e4f7563
ROOST_METHOD_SIG_HASH=header_card_8ce2bfdc6d

Scenario 1: Test with default logo URL
Details:
  TestName: test_header_card_default_logo
  Description: This test will verify that the header_card function correctly uses the default logo URL when the "LOGO" environment variable is not set.
Execution:
  Arrange: Remove the "LOGO" environment variable if it exists.
  Act: Call the header_card function with a Q object that has the required app.toml values set.
  Assert: Check that the returned card has the image attribute set to the default logo URL.
Validation:
  Rationalize: It's important to ensure that the function falls back to the default logo URL when the environment variable is not set. This guarantees that the header card will always have a logo.

Scenario 2: Test with custom logo URL
Details:
  TestName: test_header_card_custom_logo
  Description: This test will verify that the header_card function correctly uses the custom logo URL from the "LOGO" environment variable when it is set.
Execution:
  Arrange: Set the "LOGO" environment variable to a custom URL.
  Act: Call the header_card function with a Q object that has the required app.toml values set.
  Assert: Check that the returned card has the image attribute set to the custom URL.
Validation:
  Rationalize: It's important to ensure that the function uses the logo URL from the environment variable when it is set. This allows customization of the logo based on the environment.

Scenario 3: Test with valid app.toml values
Details:
  TestName: test_header_card_valid_app_values
  Description: This test will verify that the header_card function correctly uses the title and description from the app.toml file.
Execution:
  Arrange: Prepare a Q object that has valid title and description values in its app.toml.
  Act: Call the header_card function with the prepared Q object.
  Assert: Check that the returned card has the correct title and subtitle attributes.
Validation:
  Rationalize: It's important to ensure that the function correctly uses the title and description from the app.toml file. This guarantees that the header card will have the correct application-specific information.

Scenario 4: Test with missing app.toml values
Details:
  TestName: test_header_card_missing_app_values
  Description: This test will verify that the header_card function raises an appropriate error when the app.toml file is missing required values.
Execution:
  Arrange: Prepare a Q object that is missing the title or description values in its app.toml.
  Act: Call the header_card function with the prepared Q object.
  Assert: Check that an appropriate error is raised.
Validation:
  Rationalize: It's important to ensure that the function correctly handles missing values in the app.toml file. This guarantees that the application won't fail unexpectedly when the app.toml file is misconfigured.
"""

# ********RoostGPT********
import os
import pytest
from h2o_wave import ui, Q
from cards import header_card

class Test_CardsHeaderCard:

    @pytest.mark.regression
    def test_header_card_default_logo(self):
        os.environ.pop('LOGO', None)
        q = Q(app={'toml': {'App': {'Title': 'Test', 'Description': 'Test Description'}}})
        result = header_card(q)
        assert result.image == "https://h2o.ai/content/experience-fragments/h2o/us/en/site/header/master/_jcr_content/root/container/header_copy/logo.coreimg.svg/1696007565253/h2o-logo.svg"

    @pytest.mark.regression
    def test_header_card_custom_logo(self):
        os.environ['LOGO'] = 'http://custom.url/logo.png'
        q = Q(app={'toml': {'App': {'Title': 'Test', 'Description': 'Test Description'}}})
        result = header_card(q)
        assert result.image == 'http://custom.url/logo.png'

    @pytest.mark.regression
    def test_header_card_valid_app_values(self):
        os.environ.pop('LOGO', None)
        q = Q(app={'toml': {'App': {'Title': 'Test Title', 'Description': 'Test Description'}}})
        result = header_card(q)
        assert result.title == 'Test Title'
        assert result.subtitle == 'Test Description'

    @pytest.mark.negative
    def test_header_card_missing_app_values(self):
        os.environ.pop('LOGO', None)
        q = Q(app={'toml': {'App': {'Title': 'Test Title'}}})
        with pytest.raises(KeyError):
            header_card(q)
