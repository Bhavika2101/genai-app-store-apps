# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=heap_analytics_f6f23cbe00
ROOST_METHOD_SIG_HASH=heap_analytics_907a9fd75d

Scenario 1: Test when HEAP_ID is not in the environment variables
Details:
  TestName: test_heap_id_not_in_environment
  Description: This test is intended to verify the function's behavior when HEAP_ID is not set in the environment variables.
Execution:
  Arrange: Ensure that HEAP_ID is not present in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties.
  Assert: The function should return None.
Validation:
  It is important to test this scenario because HEAP_ID is a required setting for the function to work. If it is not present, the function should not proceed with its normal execution.

Scenario 2: Test when userid is None
Details:
  TestName: test_userid_is_none
  Description: This test is intended to verify the function's behavior when userid is None.
Execution:
  Arrange: Ensure that HEAP_ID is present in the environment variables.
  Act: Invoke the heap_analytics function with userid as None and any event_properties.
  Assert: The return script should not contain the heap.identify line.
Validation:
  This test verifies that the function correctly handles the case when userid is None. This is important because we do not want to identify all non-logged in users as "none".

Scenario 3: Test when userid is not None
Details:
  TestName: test_userid_is_not_none
  Description: This test is intended to verify the function's behavior when userid is not None.
Execution:
  Arrange: Ensure that HEAP_ID is present in the environment variables.
  Act: Invoke the heap_analytics function with a valid userid and any event_properties.
  Assert: The return script should contain the heap.identify line with the hashed userid.
Validation:
  This test verifies that the function correctly handles the case when userid is not None. This is important because we want to correctly identify logged-in users.

Scenario 4: Test when event_properties is None
Details:
  TestName: test_event_properties_is_none
  Description: This test is intended to verify the function's behavior when event_properties is None.
Execution:
  Arrange: Ensure that HEAP_ID is present in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties as None.
  Assert: The return script should not contain the heap.addEventProperties line.
Validation:
  This test verifies that the function correctly handles the case when event_properties is None. This is important because not all events will have properties associated with them.

Scenario 5: Test when event_properties is not None
Details:
  TestName: test_event_properties_is_not_none
  Description: This test is intended to verify the function's behavior when event_properties is not None.
Execution:
  Arrange: Ensure that HEAP_ID is present in the environment variables.
  Act: Invoke the heap_analytics function with any userid and valid event_properties.
  Assert: The return script should contain the heap.addEventProperties line with the given event_properties.
Validation:
  This test verifies that the function correctly handles the case when event_properties is not None. This is important because we want to correctly associate properties with events when they are available.
"""

# ********RoostGPT********
import os
import pytest
import hashlib
from h2o_wave import ui
from utils import heap_analytics

@pytest.mark.regression
class Test_UtilsHeapAnalytics:

    @pytest.mark.negative
    def test_heap_id_not_in_environment(self, monkeypatch):
        monkeypatch.delenv("HEAP_ID", raising=False)
        result = heap_analytics('userid', 'event_properties')
        assert result is None

    @pytest.mark.negative
    def test_userid_is_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics(None, 'event_properties')
        assert "heap.identify(" not in result.content

    @pytest.mark.positive
    def test_userid_is_not_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        userid = 'userid'
        result = heap_analytics(userid, 'event_properties')
        identity = hashlib.sha256(userid.encode()).hexdigest()
        assert f"heap.identify('{identity}');" in result.content

    @pytest.mark.negative
    def test_event_properties_is_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics('userid', None)
        assert "heap.addEventProperties(" not in result.content

    @pytest.mark.positive
    def test_event_properties_is_not_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        event_properties = 'event_properties'
        result = heap_analytics('userid', event_properties)
        assert f"heap.addEventProperties({event_properties})" in result.content
