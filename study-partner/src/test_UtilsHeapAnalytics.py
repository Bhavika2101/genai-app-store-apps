# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=heap_analytics_f6f23cbe00
ROOST_METHOD_SIG_HASH=heap_analytics_907a9fd75d

Scenario 1: Test when HEAP_ID is not in the environment variables
Details:
  TestName: test_heap_id_not_in_environment
  Description: This test is intended to verify the function's behavior when HEAP_ID is not set in the environment variables.
Execution:
  Arrange: Ensure that HEAP_ID is not present in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties.
  Assert: The function should return None.
Validation:
  It is important to test this scenario because HEAP_ID is a required setting for the function to work. If it is not present, the function should not proceed with its normal execution.

Scenario 2: Test when HEAP_ID is in the environment variables
Details:
  TestName: test_heap_id_in_environment
  Description: This test is intended to verify the function's behavior when HEAP_ID is set in the environment variables.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties.
  Assert: The function should return an instance of ui.inline_script.
Validation:
  This scenario tests the function's normal behavior. The function should return a script that loads Heap analytics.

Scenario 3: Test when userid is None
Details:
  TestName: test_userid_is_none
  Description: This test is intended to verify the function's behavior when userid is None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with userid as None and any event_properties.
  Assert: The function should return a script that does not include the 'identify' line.
Validation:
  This test is important because it verifies that the function correctly handles the case where no userid is provided.

Scenario 4: Test when userid is not None
Details:
  TestName: test_userid_is_not_none
  Description: This test is intended to verify the function's behavior when userid is not None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with a non-None userid and any event_properties.
  Assert: The function should return a script that includes the 'identify' line with the hashed userid.
Validation:
  This scenario tests the function's behavior when a userid is provided. The function should correctly hash the userid and include it in the returned script.

Scenario 5: Test when event_properties is None
Details:
  TestName: test_event_properties_is_none
  Description: This test is intended to verify the function's behavior when event_properties is None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties as None.
  Assert: The function should return a script that does not include the 'addEventProperties' line.
Validation:
  This test is important because it verifies that the function correctly handles the case where no event_properties are provided.

Scenario 6: Test when event_properties is not None
Details:
  TestName: test_event_properties_is_not_none
  Description: This test is intended to verify the function's behavior when event_properties is not None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with any userid and non-None event_properties.
  Assert: The function should return a script that includes the 'addEventProperties' line with the provided event_properties.
Validation:
  This scenario tests the function's behavior when event_properties are provided. The function should correctly add the event_properties to the returned script.
"""

# ********RoostGPT********
import os
import hashlib
import pytest
from h2o_wave import ui
from utils import heap_analytics

class Test_UtilsHeapAnalytics:

    def test_heap_id_not_in_environment(self, monkeypatch):
        monkeypatch.delenv("HEAP_ID", raising=False)
        assert heap_analytics("user1", {"prop1": "value1"}) is None

    def test_heap_id_in_environment(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics("user1", {"prop1": "value1"})
        assert isinstance(result, ui.inline_script)

    def test_userid_is_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics(None, {"prop1": "value1"})
        assert "heap.identify(" not in result.content

    def test_userid_is_not_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics("user1", {"prop1": "value1"})
        hashed_userid = hashlib.sha256("user1".encode()).hexdigest()
        assert f"heap.identify('{hashed_userid}');" in result.content

    def test_event_properties_is_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics("user1", None)
        assert "heap.addEventProperties(" not in result.content

    def test_event_properties_is_not_none(self, monkeypatch):
        monkeypatch.setenv("HEAP_ID", "1234")
        result = heap_analytics("user1", {"prop1": "value1"})
        assert "heap.addEventProperties({'prop1': 'value1'})" in result.content
