# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=heap_analytics_f6f23cbe00
ROOST_METHOD_SIG_HASH=heap_analytics_907a9fd75d

Scenario 1: Test when HEAP_ID is not in the environment variables
Details:
  TestName: test_heap_id_not_in_environment
  Description: This test is intended to verify the function's behavior when HEAP_ID is not set in the environment variables.
Execution:
  Arrange: Ensure that HEAP_ID is not present in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties.
  Assert: The function should return None.
Validation:
  It's important to test this scenario because HEAP_ID is a required setting for the function to work. If it's not present, the function should not execute further and should return None.

Scenario 2: Test when userid is not None
Details:
  TestName: test_userid_not_none
  Description: This test is intended to verify that the function correctly appends the identity to the script when userid is not None.
Execution:
  Arrange: Set HEAP_ID in the environment variables and calculate the SHA256 hash of a known userid.
  Act: Invoke the heap_analytics function with the known userid and any event_properties.
  Assert: The function should return a script including the hashed userid.
Validation:
  The function's specification states that if a userid is provided, it should be hashed and included in the script. This test verifies that this requirement is met.

Scenario 3: Test when userid is None
Details:
  TestName: test_userid_none
  Description: This test is intended to verify that the function does not append an identity to the script when userid is None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with userid set to None and any event_properties.
  Assert: The function should return a script without any userid.
Validation:
  This test verifies that the function behaves as expected when no userid is provided, which is a likely scenario for unauthenticated users.

Scenario 4: Test when event_properties is not None
Details:
  TestName: test_event_properties_not_none
  Description: This test is intended to verify that the function correctly appends event_properties to the script when event_properties is not None.
Execution:
  Arrange: Set HEAP_ID in the environment variables and prepare known event_properties.
  Act: Invoke the heap_analytics function with any userid and the known event_properties.
  Assert: The function should return a script including the event_properties.
Validation:
  The function's specification states that if event_properties are provided, they should be included in the script. This test verifies that this requirement is met.

Scenario 5: Test when event_properties is None
Details:
  TestName: test_event_properties_none
  Description: This test is intended to verify that the function does not append event_properties to the script when event_properties is None.
Execution:
  Arrange: Set HEAP_ID in the environment variables.
  Act: Invoke the heap_analytics function with any userid and event_properties set to None.
  Assert: The function should return a script without any event_properties.
Validation:
  This test verifies that the function behaves as expected when no event_properties are provided.
"""

# ********RoostGPT********
import os
import hashlib
import pytest
from h2o_wave import ui
from utils import heap_analytics

class Test_UtilsHeapAnalytics:

    @pytest.mark.regression
    def test_heap_id_not_in_environment(self):
        # Arrange
        if "HEAP_ID" in os.environ:
            del os.environ["HEAP_ID"]
        userid = "test_user"
        event_properties = {"event1": "property1"}

        # Act
        result = heap_analytics(userid, event_properties)

        # Assert
        assert result is None

    @pytest.mark.regression
    def test_userid_not_none(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = "test_user"
        event_properties = {"event1": "property1"}
        expected_identity = hashlib.sha256(userid.encode()).hexdigest()

        # Act
        result = heap_analytics(userid, event_properties)

        # Assert
        assert f"heap.identify('{expected_identity}');" in result.content

    @pytest.mark.regression
    def test_userid_none(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = None
        event_properties = {"event1": "property1"}

        # Act
        result = heap_analytics(userid, event_properties)

        # Assert
        assert "heap.identify(" not in result.content

    @pytest.mark.regression
    def test_event_properties_not_none(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = "test_user"
        event_properties = {"event1": "property1"}

        # Act
        result = heap_analytics(userid, event_properties)

        # Assert
        assert f"heap.addEventProperties({event_properties})" in result.content

    @pytest.mark.regression
    def test_event_properties_none(self):
        # Arrange
        os.environ["HEAP_ID"] = "test_heap_id"
        userid = "test_user"
        event_properties = None

        # Act
        result = heap_analytics(userid, event_properties)

        # Assert
        assert "heap.addEventProperties(" not in result.content
