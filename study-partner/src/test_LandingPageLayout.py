# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=landing_page_layout_90def32e1f
ROOST_METHOD_SIG_HASH=landing_page_layout_3fc2cb5227

Scenario 1: Validate the title in the meta card
Details:
  TestName: test_meta_card_title
  Description: This test verifies that the title in the meta card is correctly taken from the application's toml file.
Execution:
  Arrange: Initialize a Q object with an app.toml file having a known 'Title'.
  Act: Invoke the landing_page_layout function with the Q object.
  Assert: Check that the title in the meta card matches the 'Title' from the app.toml file.
Validation:
  The title of the application is a crucial piece of information that needs to be correctly displayed. This test ensures that the title is correctly fetched from the app.toml file and displayed in the meta card.

Scenario 2: Validate the script in the meta card
Details:
  TestName: test_meta_card_script
  Description: This test verifies that the script in the meta card is correctly generated using heap_analytics function with the correct userid and event_properties.
Execution:
  Arrange: Initialize a Q object with a known userid and app.toml file.
  Act: Invoke the landing_page_layout function with the Q object.
  Assert: Check that the script in the meta card matches the output of the heap_analytics function with the correct userid and event_properties.
Validation:
  The script is used for tracking user behavior and analytics. It is crucial that the script is correctly generated with the right userid and event_properties. This test ensures that the script is correctly generated.

Scenario 3: Validate the theme in the meta card
Details:
  TestName: test_meta_card_theme
  Description: This test verifies that the theme in the meta card is correctly set to 'custom' and the primary color is correctly fetched from the environment variable.
Execution:
  Arrange: Set the environment variable "PRIMARY_COLOR" to a known value. Initialize a Q object.
  Act: Invoke the landing_page_layout function with the Q object.
  Assert: Check that the theme in the meta card is 'custom' and the primary color matches the value of the "PRIMARY_COLOR" environment variable.
Validation:
  The theme and primary color are important for the look and feel of the application. It is important that they are correctly fetched from the environment variables and set in the meta card. This test ensures that the theme and primary color are correctly set.

Scenario 4: Validate the layout for small screens
Details:
  TestName: test_layout_small_screens
  Description: This test verifies that the layout for small screens is correctly set with the 'header', 'body', and 'footer' zones.
Execution:
  Arrange: Initialize a Q object.
  Act: Invoke the landing_page_layout function with the Q object.
  Assert: Check that the layout for small screens has the 'header', 'body', and 'footer' zones.
Validation:
  The layout for small screens is crucial for a responsive design. This test ensures that the layout for small screens is correctly set with the 'header', 'body', and 'footer' zones.

Scenario 5: Validate the layout for extra small screens
Details:
  TestName: test_layout_extra_small_screens
  Description: This test verifies that the layout for extra small screens is correctly set with the 'header', 'body', and 'footer' zones.
Execution:
  Arrange: Initialize a Q object.
  Act: Invoke the landing_page_layout function with the Q object.
  Assert: Check that the layout for extra small screens has the 'header', 'body', and 'footer' zones.
Validation:
  The layout for extra small screens is crucial for a responsive design. This test ensures that the layout for extra small screens is correctly set with the 'header', 'body', and 'footer' zones.
"""

# ********RoostGPT********
import os
import pytest
from h2o_wave import ui, Q
from src.cards import *
from src.utils import heap_analytics
from layout import landing_page_layout

class Test_LandingPageLayout:

    @pytest.mark.regression
    def test_meta_card_title(self):
        q = Q(app={'toml': {'App': {'Title': 'Test Title'}}})
        landing_page_layout(q)
        assert q.page['meta'].title == 'Test Title'

    @pytest.mark.regression
    def test_meta_card_script(self):
        q = Q(app={'toml': {'App': {'Title': 'Test Title', 'Version': '1.0'}}}, auth={'subject': 'test_user'})
        landing_page_layout(q)
        assert q.page['meta'].script == heap_analytics(
            userid='test_user',
            event_properties="{version: '1.0', product: 'Test Title'}",
        )

    @pytest.mark.regression
    def test_meta_card_theme(self):
        os.environ["PRIMARY_COLOR"] = "#123456"
        q = Q()
        landing_page_layout(q)
        assert q.page['meta'].themes[0].primary == "#123456"
        assert q.page['meta'].themes[0].name == 'custom'

    @pytest.mark.regression
    def test_layout_small_screens(self):
        q = Q()
        landing_page_layout(q)
        layout_s = q.page['meta'].layouts[1]
        assert layout_s.breakpoint == 's'
        assert 'header' in [zone.name for zone in layout_s.zones]
        assert 'body' in [zone.name for zone in layout_s.zones]
        assert 'footer' in [zone.name for zone in layout_s.zones]

    @pytest.mark.regression
    def test_layout_extra_small_screens(self):
        q = Q()
        landing_page_layout(q)
        layout_xs = q.page['meta'].layouts[0]
        assert layout_xs.breakpoint == 'xs'
        assert 'header' in [zone.name for zone in layout_xs.zones]
        assert 'body' in [zone.name for zone in layout_xs.zones]
        assert 'footer' in [zone.name for zone in layout_xs.zones]
