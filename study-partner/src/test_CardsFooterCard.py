# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=footer_card_062d99a4b9
ROOST_METHOD_SIG_HASH=footer_card_3e136a9ae6

Scenario 1: Validating the Box Parameter in the Footer Card
Details:
  TestName: test_box_parameter
  Description: This test is intended to verify that the footer card's box parameter is correctly set to "footer".
Execution:
  Arrange: No setup required as the function does not take any parameters.
  Act: Invoke the function footer_card().
  Assert: Check if the box attribute of the returned footer_card object is set to "footer".
Validation:
  Rationalize: This test ensures that the footer card is correctly placed at the bottom of the page, as per the business requirement and function's specification.

Scenario 2: Validating the Caption Parameter in the Footer Card
Details:
  TestName: test_caption_parameter
  Description: This test is intended to verify that the footer card's caption parameter is correctly set to "Made with ðŸ’› and H2O Wave.".
Execution:
  Arrange: No setup required as the function does not take any parameters.
  Act: Invoke the function footer_card().
  Assert: Check if the caption attribute of the returned footer_card object is set to "Made with ðŸ’› and H2O Wave.".
Validation:
  Rationalize: This test ensures that the footer card displays the correct caption, as per the business requirement and function's specification.

Scenario 3: Validating the Type of the Returned Object
Details:
  TestName: test_returned_object_type
  Description: This test is intended to verify that the footer card function returns an object of the type ui.footer_card.
Execution:
  Arrange: No setup required as the function does not take any parameters.
  Act: Invoke the function footer_card().
  Assert: Check if the returned object is an instance of the class ui.footer_card.
Validation:
  Rationalize: This test ensures that the function returns the correct type of object, which is crucial for the subsequent operations on the returned object, as per the business requirement and function's specification.
"""

# ********RoostGPT********
import pytest
from h2o_wave import ui
from cards import footer_card

class Test_CardsFooterCard:

    @pytest.mark.regression
    def test_box_parameter(self):
        # Arrange: No setup required as the function does not take any parameters.

        # Act: Invoke the function footer_card().
        result = footer_card()

        # Assert: Check if the box attribute of the returned footer_card object is set to "footer".
        assert result.box == "footer", "Footer card's box is not set correctly."

    @pytest.mark.regression
    def test_caption_parameter(self):
        # Arrange: No setup required as the function does not take any parameters.

        # Act: Invoke the function footer_card().
        result = footer_card()

        # Assert: Check if the caption attribute of the returned footer_card object is set to "Made with ðŸ’› and H2O Wave.".
        assert result.caption == "Made with ðŸ’› and H2O Wave.", "Footer card's caption is not set correctly."

    @pytest.mark.regression
    def test_returned_object_type(self):
        # Arrange: No setup required as the function does not take any parameters.

        # Act: Invoke the function footer_card().
        result = footer_card()

        # Assert: Check if the returned object is an instance of the class ui.footer_card.
        assert isinstance(result, ui.footer_card), "Returned object is not an instance of ui.footer_card."
