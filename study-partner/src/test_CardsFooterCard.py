# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=footer_card_062d99a4b9
ROOST_METHOD_SIG_HASH=footer_card_3e136a9ae6

Scenario 1: Validating the creation of the footer card
Details:
  TestName: test_footer_card_creation
  Description: This test is intended to verify that the footer card is created with the correct box and caption.
Execution:
  Arrange: No arrangement needed as the function does not require any parameters.
  Act: Call the footer_card function.
  Assert: Check the returned card's box and caption. The box should be 'footer', and the caption should be 'Made with ðŸ’› and H2O Wave.'.
Validation:
  The importance of this test is to ensure that the function is creating the footer card with the correct box and caption. The expected result is directly connected to the function's specifications and business requirements.

Scenario 2: Verifying the type of the returned object
Details:
  TestName: test_footer_card_return_type
  Description: This test is intended to verify that the returned object is of the correct type.
Execution:
  Arrange: No arrangement needed as the function does not require any parameters.
  Act: Call the footer_card function.
  Assert: Check that the type of the returned object is h2o_wave.ui._ui.Card.
Validation:
  This test is important to ensure that the function is returning an object of the correct type. The expected result is directly connected to the function's specifications and business requirements.

Scenario 3: Checking the attributes of the returned object
Details:
  TestName: test_footer_card_attributes
  Description: This test is intended to verify that the returned object has the correct attributes.
Execution:
  Arrange: No arrangement needed as the function does not require any parameters.
  Act: Call the footer_card function.
  Assert: Check that the returned card object has the necessary attributes (box, caption).
Validation:
  This test is important to ensure that the function is returning an object with the correct attributes. The expected result is directly connected to the function's specifications and business requirements.
"""

# ********RoostGPT********
import os
from h2o_wave import ui, Q, data
from cards import footer_card
import pytest

class Test_CardsFooterCard:

    @pytest.mark.smoke
    def test_footer_card_creation(self):
        # Act
        card = footer_card()

        # Assert
        assert card.box == 'footer', "Box should be 'footer'"
        assert card.caption == 'Made with ðŸ’› and H2O Wave.', "Caption should be 'Made with ðŸ’› and H2O Wave.'"
        
    @pytest.mark.regression
    def test_footer_card_return_type(self):
        # Act
        card = footer_card()

        # Assert
        assert isinstance(card, ui._ui.Card), "Returned object should be of type h2o_wave.ui._ui.Card."
        
    @pytest.mark.regression
    def test_footer_card_attributes(self):
        # Act
        card = footer_card()

        # Assert
        assert hasattr(card, 'box'), "Returned object should have attribute 'box'."
        assert hasattr(card, 'caption'), "Returned object should have attribute 'caption'."
