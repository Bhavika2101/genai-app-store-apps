# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=device_not_supported_card_9fa9f4ae8a
ROOST_METHOD_SIG_HASH=device_not_supported_card_f06272b12e

Scenario 1: Verify the correct card type.
Details:
  TestName: test_correct_card_type
  Description: This test verifies that the function returns an instance of ui.form_card.
Execution:
  Arrange: No setup required.
  Act: Call the device_not_supported_card function and store the result.
  Assert: Check that the result is an instance of ui.form_card.
Validation:
  It's important to ensure that the function is returning the correct type of card. This is the basic functionality of the function, and if it fails this test, it is not meeting its specifications.

Scenario 2: Verify the correct positioning of the card.
Details:
  TestName: test_correct_card_position
  Description: This test verifies that the function returns a card with the correct box parameter.
Execution:
  Arrange: No setup required.
  Act: Call the device_not_supported_card function and store the result.
  Assert: Check that the 'box' attribute of the result is "device-not-supported".
Validation:
  The card's positioning in the user interface is determined by the 'box' attribute. It's important to ensure that the function is setting this attribute correctly so that the card appears in the right place in the UI.

Scenario 3: Verify the correct card content.
Details:
  TestName: test_correct_card_content
  Description: This test verifies that the function returns a card with the correct content.
Execution:
  Arrange: No setup required.
  Act: Call the device_not_supported_card function and store the result.
  Assert: Check that the 'items' attribute of the result contains a ui.text_xl object with the correct text.
Validation:
  The card's content is determined by the 'items' attribute. It's important to ensure that the function is setting this attribute correctly, with the correct type of ui object and the correct text, so that the card displays the intended message to the user.

Scenario 4: Verify the card content type.
Details:
  TestName: test_card_content_type
  Description: This test verifies that the function returns a card with the correct content type.
Execution:
  Arrange: No setup required.
  Act: Call the device_not_supported_card function and store the result.
  Assert: Check that the 'items' attribute of the result contains an instance of ui.text_xl.
Validation:
  The type of ui object used to display the text on the card affects the appearance of the text. It's important to ensure that the function is using the correct type of ui object to meet the design specifications of the card.
"""

# ********RoostGPT********
import pytest
from h2o_wave import ui
from cards import device_not_supported_card

class Test_CardsDeviceNotSupportedCard:
    
    @pytest.mark.regression
    def test_correct_card_type(self):
        result = device_not_supported_card()
        assert isinstance(result, ui.form_card), "The result is not an instance of ui.form_card"

    @pytest.mark.regression
    def test_correct_card_position(self):
        result = device_not_supported_card()
        assert result.box == "device-not-supported", "The box attribute of the result is not 'device-not-supported'"

    @pytest.mark.regression
    def test_correct_card_content(self):
        result = device_not_supported_card()
        text = "This app was built desktop; it is not available on mobile or tablets."
        assert any(isinstance(item, ui.text_xl) and item.text == text for item in result.items), \
            "The 'items' attribute of the result does not contain a ui.text_xl object with the correct text"

    @pytest.mark.regression
    def test_card_content_type(self):
        result = device_not_supported_card()
        assert any(isinstance(item, ui.text_xl) for item in result.items), \
            "The 'items' attribute of the result does not contain an instance of ui.text_xl"
