# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=get_time_since_e332c366ef
ROOST_METHOD_SIG_HASH=get_time_since_2111c80583

Scenario 1: Test for timestamps less than a minute old
Details:
  TestName: test_get_time_since_seconds
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps less than a minute old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few seconds ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of seconds ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps less than a minute old, which is a common situation in real-time systems.

Scenario 2: Test for timestamps more than a minute old but less than an hour old
Details:
  TestName: test_get_time_since_minutes
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps more than a minute old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few minutes ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of minutes ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps more than a minute old, which is a common situation in systems that do not require real-time updates.

Scenario 3: Test for timestamps more than an hour old but less than a day old
Details:
  TestName: test_get_time_since_hours
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps more than an hour old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few hours ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of hours ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps more than an hour old, which is typical in systems that only require hourly updates.

Scenario 4: Test for timestamps more than a day old but less than a month old
Details:
  TestName: test_get_time_since_days
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps more than a day old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few days ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of days ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps more than a day old, which is a common situation in systems that require daily updates.

Scenario 5: Test for timestamps more than a month old but less than a year old
Details:
  TestName: test_get_time_since_months
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps more than a month old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few months ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of months ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps more than a month old, which is a typical situation in systems that require monthly updates.

Scenario 6: Test for timestamps more than a year old
Details:
  TestName: test_get_time_since_years
  Description: This test is intended to verify that the function correctly calculates the time difference for timestamps more than a year old and returns the appropriate message.
Execution:
  Arrange: Generate a timestamp for a few years ago.
  Act: Invoke the get_time_since function with the generated timestamp.
  Assert: Check that the function returns the correct message indicating the number of years ago.
Validation:
  This test is important to confirm that the function correctly handles timestamps more than a year old, which is a common situation in systems that require yearly updates.
"""

# ********RoostGPT********
import pytest
from datetime import datetime, timedelta
from app import get_time_since

class Test_GetTimeSince:

    @pytest.mark.regression
    def test_get_time_since_seconds(self):
        timestamp = datetime.now() - timedelta(seconds=10)
        assert get_time_since(timestamp) == '10 Seconds Ago'

    @pytest.mark.regression
    def test_get_time_since_minutes(self):
        timestamp = datetime.now() - timedelta(minutes=10)
        assert get_time_since(timestamp) == '10 Minutes Ago'

    @pytest.mark.regression
    def test_get_time_since_hours(self):
        timestamp = datetime.now() - timedelta(hours=10)
        assert get_time_since(timestamp) == '10 Hours Ago'

    @pytest.mark.regression
    def test_get_time_since_days(self):
        timestamp = datetime.now() - timedelta(days=10)
        assert get_time_since(timestamp) == '10 Days Ago'

    @pytest.mark.regression
    def test_get_time_since_months(self):
        timestamp = datetime.now() - timedelta(days=10*30)
        assert get_time_since(timestamp) == '10 Months Ago'

    @pytest.mark.regression
    def test_get_time_since_years(self):
        timestamp = datetime.now() - timedelta(days=10*365)
        assert get_time_since(timestamp) == '10 Years Ago'
