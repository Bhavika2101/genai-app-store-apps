# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=landing_page_layout_a29b714ea2
ROOST_METHOD_SIG_HASH=landing_page_layout_3fc2cb5227

================================VULNERABILITIES================================
Vulnerability: Insecure Use of Environment Variables
Issue: The code uses os.getenv to fetch 'PRIMARY_COLOR' and 'SECONDARY_COLOR' environment variables. This is potentially insecure if environment variables contain sensitive data and are not properly protected.
Solution: Avoid storing sensitive data in environment variables. If it's necessary, ensure the environment is secured and access is restricted.

Vulnerability: Potential Code Injection
Issue: The function heap_analytics might be vulnerable to code injection attacks if user inputs are not properly sanitized before being used.
Solution: Ensure that the user inputs are properly sanitized before being passed to the heap_analytics function. Use prepared statements or parameterized queries to avoid potential code injection attacks.

================================================================================
Scenario 1: Test the meta card information
Details:
  TestName: test_meta_card_info
  Description: This test is intended to verify that the meta card contains the correct information such as the title, icon, theme, script and the primary and secondary colors.
Execution:
  Arrange: Initialize the q object with the necessary toml and auth information.
  Act: Call the landing_page_layout function with the initialized q object.
  Assert: Verify that the meta card has the correct title, icon, theme, script and the primary and secondary colors.
Validation:
  This test is important to ensure that the landing page has the correct branding and analytics information.

Scenario 2: Test the layout for extra small screens
Details:
  TestName: test_layout_xs
  Description: This test is intended to verify that the layout for extra small screens contains the correct zones.
Execution:
  Arrange: Initialize the q object with the necessary toml and auth information.
  Act: Call the landing_page_layout function with the initialized q object.
  Assert: Verify that the layout for extra small screens contains the zones 'header', 'body', 'collections-mobile', 'chat' and 'footer'.
Validation:
  This test ensures that the layout on extra small screens is displayed correctly.

Scenario 3: Test the layout for small screens
Details:
  TestName: test_layout_s
  Description: This test is intended to verify that the layout for small screens contains the correct zones.
Execution:
  Arrange: Initialize the q object with the necessary toml and auth information.
  Act: Call the landing_page_layout function with the initialized q object.
  Assert: Verify that the layout for small screens contains the zones 'header', 'body', 'collections', 'chat' and 'footer'.
Validation:
  This test ensures that the layout on small screens is displayed correctly.

Scenario 4: Test the heap analytics script
Details:
  TestName: test_heap_analytics_script
  Description: This test is intended to verify that the heap analytics script contains the correct user id and event properties.
Execution:
  Arrange: Initialize the q object with the necessary toml and auth information.
  Act: Call the landing_page_layout function with the initialized q object.
  Assert: Verify that the heap analytics script contains the correct user id and event properties.
Validation:
  This test ensures that the correct analytics data is being sent to the heap analytics platform.
"""

# ********RoostGPT********
import os
from h2o_wave import ui, Q
from src.cards import header_card, footer_card, device_not_supported_card, chatbot_card
from src.utils import heap_analytics
from layout import landing_page_layout
import pytest

class Test_LayoutLandingPageLayout:

    @pytest.mark.regression
    def test_meta_card_info(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0'}}}, auth={'subject': 'testUser'})
        
        # Act
        landing_page_layout(q)
        
        # Assert
        assert q.page['meta'].title == 'TestApp'
        assert q.page['meta'].icon == 'Dictionary'
        assert q.page['meta'].theme == 'custom'
        assert q.page['meta'].themes[0].primary == os.getenv("PRIMARY_COLOR", "#585481")
        assert q.page['meta'].themes[0].page == os.getenv("SECONDARY_COLOR", "#C49BBB")

    @pytest.mark.regression
    def test_layout_xs(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0'}}}, auth={'subject': 'testUser'})
        
        # Act
        landing_page_layout(q)
        
        # Assert
        layout_xs = [layout for layout in q.page['meta'].layouts if layout.breakpoint == 'xs'][0]
        assert 'header' in [zone.name for zone in layout_xs.zones]
        assert 'body' in [zone.name for zone in layout_xs.zones]
        assert 'collections-mobile' in [zone.name for zone in layout_xs.zones]
        assert 'chat' in [zone.name for zone in layout_xs.zones]
        assert 'footer' in [zone.name for zone in layout_xs.zones]

    @pytest.mark.regression
    def test_layout_s(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0'}}}, auth={'subject': 'testUser'})
        
        # Act
        landing_page_layout(q)
        
        # Assert
        layout_s = [layout for layout in q.page['meta'].layouts if layout.breakpoint == 's'][0]
        assert 'header' in [zone.name for zone in layout_s.zones]
        assert 'body' in [zone.name for zone in layout_s.zones]
        assert 'collections' in [zone.name for zone in layout_s.zones]
        assert 'chat' in [zone.name for zone in layout_s.zones]
        assert 'footer' in [zone.name for zone in layout_s.zones]

    @pytest.mark.regression
    def test_heap_analytics_script(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0'}}}, auth={'subject': 'testUser'})
        
        # Act
        landing_page_layout(q)
        
        # Assert
        script = q.page['meta'].script
        assert "testUser" in script
        assert "TestApp" in script
        assert "1.0" in script
