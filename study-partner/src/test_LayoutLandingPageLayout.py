# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=landing_page_layout_a29b714ea2
ROOST_METHOD_SIG_HASH=landing_page_layout_3fc2cb5227

Scenario 1: Test the meta card information
Details:
  TestName: test_meta_card_info
  Description: This test is intended to verify that the meta card's title and icon are correctly set from the app's toml file.
Execution:
  Arrange: Initialize Q object with an app.toml file containing the 'Title' and 'Version' fields under the 'App' key.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the title and icon of the meta card in the Q object's page match the expected values.
Validation:
  The test ensures that the meta card's title and icon are correctly set, which is essential for the landing page's appearance and branding.

Scenario 2: Test the theme settings for the meta card
Details:
  TestName: test_theme_settings
  Description: This test is intended to verify that the primary, text, card, and page colors are correctly set in the theme of the meta card.
Execution:
  Arrange: Initialize Q object and set environment variables for PRIMARY_COLOR and SECONDARY_COLOR.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the theme's primary, text, card, and page colors match the expected values.
Validation:
  The test ensures that the theme's color settings are correctly applied, which is crucial for maintaining a consistent visual appearance across the app.

Scenario 3: Test layout settings for extra small screens
Details:
  TestName: test_layout_xs_screens
  Description: This test is intended to verify that the layout settings for extra small screens are correctly set in the meta card.
Execution:
  Arrange: Initialize Q object.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the breakpoint, height, and zones of the layout for extra small screens match the expected values.
Validation:
  The test ensures that the layout settings for extra small screens are correctly applied, which is important for the user experience on such devices.

Scenario 4: Test layout settings for small screens
Details:
  TestName: test_layout_s_screens
  Description: This test is intended to verify that the layout settings for small screens are correctly set in the meta card.
Execution:
  Arrange: Initialize Q object.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the breakpoint, min_height, and zones of the layout for small screens match the expected values.
Validation:
  The test ensures that the layout settings for small screens are correctly applied, which is important for the user experience on such devices.

Scenario 5: Test heap analytics script generation
Details:
  TestName: test_heap_analytics_script
  Description: This test is intended to verify that the heap analytics script is correctly generated.
Execution:
  Arrange: Initialize Q object with an app.toml file containing the 'Title' and 'Version' fields under the 'App' key, and set the auth.subject field.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the script of the meta card in the Q object's page matches the expected value.
Validation:
  The test ensures that the heap analytics script is correctly generated, which is crucial for tracking user activity and interactions with the app.
"""

# ********RoostGPT********
import os
import pytest
from h2o_wave import ui, Q
from layout import landing_page_layout
from src.cards import header_card, footer_card, device_not_supported_card, chatbot_card
from src.utils import heap_analytics


class Test_LayoutLandingPageLayout:

    @pytest.mark.smoke
    def test_meta_card_info(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'Test App', 'Version': '1.0.0'}}})

        # Act
        landing_page_layout(q)

        # Assert
        assert q.page['meta'].title == 'Test App'
        assert q.page['meta'].icon == 'Dictionary'

    @pytest.mark.regression
    def test_theme_settings(self):
        # Arrange
        q = Q()
        os.environ["PRIMARY_COLOR"] = "#000000"
        os.environ["SECONDARY_COLOR"] = "#FFFFFF"

        # Act
        landing_page_layout(q)

        # Assert
        assert q.page['meta'].themes[0].primary == "#000000"
        assert q.page['meta'].themes[0].text == '#000000'
        assert q.page['meta'].themes[0].card == '#ffffff'
        assert q.page['meta'].themes[0].page == "#FFFFFF"

    @pytest.mark.regression
    def test_layout_xs_screens(self):
        # Arrange
        q = Q()

        # Act
        landing_page_layout(q)

        # Assert
        xs_layout = q.page['meta'].layouts[0]
        assert xs_layout.breakpoint == "xs"
        assert xs_layout.height == "100vh"
        assert len(xs_layout.zones) == 3

    @pytest.mark.regression
    def test_layout_s_screens(self):
        # Arrange
        q = Q()

        # Act
        landing_page_layout(q)

        # Assert
        s_layout = q.page['meta'].layouts[1]
        assert s_layout.breakpoint == "s"
        assert s_layout.min_height == "100vh"
        assert len(s_layout.zones) == 3

    @pytest.mark.regression
    def test_heap_analytics_script(self):
        # Arrange
        q = Q(app={'toml': {'App': {'Title': 'Test App', 'Version': '1.0.0'}}})
        q.auth = {'subject': 'test_user'}

        # Act
        landing_page_layout(q)

        # Assert
        expected_script = heap_analytics(
            userid='test_user',
            event_properties="{version: '1.0.0', product: 'Test App'}",
        )
        assert q.page['meta'].script == expected_script
