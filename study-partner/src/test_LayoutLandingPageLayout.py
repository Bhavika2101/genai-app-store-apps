# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=landing_page_layout_a29b714ea2
ROOST_METHOD_SIG_HASH=landing_page_layout_3fc2cb5227

Scenario 1: Test the meta card information
Details:
  TestName: test_meta_card_info
  Description: This test is intended to verify that the meta card's title and icon are correctly set from the app's toml file.
Execution:
  Arrange: Initialize Q object with an app.toml file containing the 'Title' and 'Version' fields under the 'App' key.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the title and icon of the meta card in the Q object's page match the expected values.
Validation:
  The test ensures that the meta card's title and icon are correctly set, which is essential for the landing page's appearance and branding.

Scenario 2: Test the theme settings for the meta card
Details:
  TestName: test_theme_settings
  Description: This test is intended to verify that the primary, text, card, and page colors are correctly set from the environment variables.
Execution:
  Arrange: Set environment variables for PRIMARY_COLOR and SECONDARY_COLOR. Initialize a Q object.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the primary, text, card, and page colors of the theme in the meta card match the expected values.
Validation:
  This test ensures that the theme colors are correctly set from the environment variables, which is crucial for maintaining a consistent look and feel across the application.

Scenario 3: Test the layouts for different breakpoints
Details:
  TestName: test_layouts
  Description: This test is intended to verify that the layouts for different breakpoints (xs and s) are correctly set.
Execution:
  Arrange: Initialize a Q object.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the layouts in the meta card match the expected layouts for the xs and s breakpoints.
Validation:
  The test ensures that the correct layouts are set for different breakpoints, which is essential for the landing page's responsiveness on different screen sizes.

Scenario 4: Test the heap analytics script
Details:
  TestName: test_heap_analytics_script
  Description: This test is intended to verify that the heap analytics script is correctly set with the user id and event properties.
Execution:
  Arrange: Initialize a Q object with a user id and an app.toml file containing the 'Title' and 'Version' fields under the 'App' key.
  Act: Invoke the landing_page_layout function with the initialized Q object.
  Assert: Check that the script of the meta card in the Q object's page matches the expected script.
Validation:
  The test ensures that the heap analytics script is correctly set, which is crucial for tracking user activities and events on the landing page.
"""

# ********RoostGPT********
import os
import pytest
from h2o_wave import ui, Q
from src.cards import header_card, footer_card, device_not_supported_card, chatbot_card
from src.utils import heap_analytics
from layout import landing_page_layout

class Test_LayoutLandingPageLayout:

    @pytest.mark.regression
    def test_meta_card_info(self):
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0.0'}}})
        landing_page_layout(q)
        assert q.page['meta'].title == 'TestApp'
        assert q.page['meta'].icon == 'Dictionary'

    @pytest.mark.regression
    def test_theme_settings(self):
        os.environ["PRIMARY_COLOR"] = "#123456"
        os.environ["SECONDARY_COLOR"] = "#654321"
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0.0'}}})
        landing_page_layout(q)
        assert q.page['meta'].themes[0].primary == "#123456"
        assert q.page['meta'].themes[0].page == "#654321"

    @pytest.mark.regression
    def test_layouts(self):
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0.0'}}})
        landing_page_layout(q)
        assert q.page['meta'].layouts[0].breakpoint == "xs"
        assert q.page['meta'].layouts[0].zones[1].name == "body"
        assert q.page['meta'].layouts[1].breakpoint == "s"
        assert q.page['meta'].layouts[1].zones[1].name == "body"

    @pytest.mark.regression
    def test_heap_analytics_script(self):
        q = Q(app={'toml': {'App': {'Title': 'TestApp', 'Version': '1.0.0'}}}, auth={'subject': 'test_user'})
        landing_page_layout(q)
        expected_script = heap_analytics(
            userid='test_user',
            event_properties="{version: '1.0.0', product: 'TestApp'}"
        )
        assert q.page['meta'].script == expected_script
