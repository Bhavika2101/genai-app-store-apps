# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=waiting_dialog_85f1e60e70
ROOST_METHOD_SIG_HASH=waiting_dialog_01168c71e8

Scenario 1: Validate Dialog Creation with Default Title
Details:
  TestName: test_dialog_creation_with_default_title
  Description: This test will validate whether the dialog is successfully created with the default title when no title is provided.
Execution:
  Arrange: Create a Q object with a page and an app with a loader image.
  Act: Invoke the waiting_dialog function with the Q object and without providing a title.
  Assert: Check if the dialog is created with the default title and the specified loader image.
Validation:
  This test ensures that the function correctly handles the case where no title is provided, which is an important part of the function's specifications.

Scenario 2: Validate Dialog Creation with Custom Title
Details:
  TestName: test_dialog_creation_with_custom_title
  Description: This test will validate whether the dialog is successfully created with a custom title when a title is provided.
Execution:
  Arrange: Create a Q object with a page and an app with a loader image.
  Act: Invoke the waiting_dialog function with the Q object and a custom title.
  Assert: Check if the dialog is created with the custom title and the specified loader image.
Validation:
  This test ensures that the function correctly handles the case where a custom title is provided, which is a crucial part of the function's specifications.

Scenario 3: Validate Dialog Blocking Behavior
Details:
  TestName: test_dialog_blocking_behavior
  Description: This test will validate whether the dialog is blocking the rest of the UI while it is displayed.
Execution:
  Arrange: Create a Q object with a page and an app with a loader image.
  Act: Invoke the waiting_dialog function with the Q object.
  Assert: Check if the dialog is blocking the rest of the UI while it is displayed.
Validation:
  This test ensures that the dialog is correctly blocking the rest of the UI, which is a crucial part of the function's specifications and important for user experience.

Scenario 4: Validate Dialog Deletion After Save
Details:
  TestName: test_dialog_deletion_after_save
  Description: This test will validate whether the dialog is correctly deleted after the page save operation.
Execution:
  Arrange: Create a Q object with a page and an app with a loader image.
  Act: Invoke the waiting_dialog function with the Q object.
  Assert: Check if the dialog is deleted after the page save operation.
Validation:
  This test ensures that the dialog is correctly deleted after the page save operation, which is an important part of the function's specifications and critical for maintaining the correct state of the page.
"""

# ********RoostGPT********
import pytest
import os
from h2o_wave import ui, Q
from layout import waiting_dialog
from src.cards import *
from src.utils import heap_analytics

class Test_WaitingDialog:
    @pytest.mark.regression
    def test_dialog_creation_with_default_title(self, monkeypatch):
        q = Q(app={'loader_s': 'loader.jpg'}, page={})
        monkeypatch.setattr('h2o_wave.ui.dialog', ui.dialog)
        monkeypatch.setattr('h2o_wave.Q.page.save', lambda x: None)
        waiting_dialog(q)
        assert q.page["meta"].dialog.title == ""
        assert q.page["meta"].dialog.items[0].path == 'loader.jpg'

    @pytest.mark.regression
    def test_dialog_creation_with_custom_title(self, monkeypatch):
        custom_title = 'Custom Title'
        q = Q(app={'loader_s': 'loader.jpg'}, page={})
        monkeypatch.setattr('h2o_wave.ui.dialog', ui.dialog)
        monkeypatch.setattr('h2o_wave.Q.page.save', lambda x: None)
        waiting_dialog(q, custom_title)
        assert q.page["meta"].dialog.title == custom_title
        assert q.page["meta"].dialog.items[0].path == 'loader.jpg'

    @pytest.mark.regression
    def test_dialog_blocking_behavior(self, monkeypatch):
        q = Q(app={'loader_s': 'loader.jpg'}, page={})
        monkeypatch.setattr('h2o_wave.ui.dialog', ui.dialog)
        monkeypatch.setattr('h2o_wave.Q.page.save', lambda x: None)
        waiting_dialog(q)
        assert q.page["meta"].dialog.blocking == True

    @pytest.mark.regression
    def test_dialog_deletion_after_save(self, monkeypatch):
        q = Q(app={'loader_s': 'loader.jpg'}, page={})
        monkeypatch.setattr('h2o_wave.ui.dialog', ui.dialog)
        monkeypatch.setattr('h2o_wave.Q.page.save', lambda x: None)
        waiting_dialog(q)
        assert q.page["meta"].dialog is None
