# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit-studypartner using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=get_time_since_e332c366ef
ROOST_METHOD_SIG_HASH=get_time_since_2111c80583

Scenario 1: Testing for a timestamp that is exactly one year ago
Details:
  TestName: test_exact_one_year
  Description: This test is intended to verify that the function accurately calculates the time difference for a timestamp that is exactly one year ago.
Execution:
  Arrange: Prepare a timestamp that is exactly one year ago from the current time.
  Act: Invoke the function get_time_since with the prepared timestamp.
  Assert: Check that the returned string is '1 Years Ago'.
Validation:
  This test verifies that the function correctly calculates time differences of a year. It is important because the function must correctly handle timestamps that are exactly on the boundary of a year.

Scenario 2: Testing for a timestamp that is less than a minute ago
Details:
  TestName: test_less_than_minute
  Description: This test is intended to verify that the function accurately calculates the time difference for a timestamp that is less than a minute ago.
Execution:
  Arrange: Prepare a timestamp that is less than a minute ago from the current time.
  Act: Invoke the function get_time_since with the prepared timestamp.
  Assert: Check that the returned string is in the format of '{X} Seconds Ago' where X is the number of seconds.
Validation:
  This test verifies that the function correctly calculates time differences of less than a minute. This is important because the function must correctly handle short time differences, which are likely to be common.

Scenario 3: Testing for a timestamp that is more than a year ago
Details:
  TestName: test_more_than_a_year
  Description: This test is intended to verify that the function accurately calculates the time difference for a timestamp that is more than a year ago.
Execution:
  Arrange: Prepare a timestamp that is more than a year ago from the current time.
  Act: Invoke the function get_time_since with the prepared timestamp.
  Assert: Check that the returned string is in the format of '{X} Years Ago' where X is the number of years.
Validation:
  This test verifies that the function correctly calculates time differences of more than a year. It is important because the function must correctly handle large time differences, which may occur in certain use cases.

Scenario 4: Testing for a timestamp that is exactly one month ago
Details:
  TestName: test_exact_one_month
  Description: This test is intended to verify that the function accurately calculates the time difference for a timestamp that is exactly one month ago.
Execution:
  Arrange: Prepare a timestamp that is exactly one month ago from the current time.
  Act: Invoke the function get_time_since with the prepared timestamp.
  Assert: Check that the returned string is '1 Months Ago'.
Validation:
  This test verifies that the function correctly calculates time differences of a month. It is important because the function must correctly handle timestamps that are exactly on the boundary of a month.

Scenario 5: Testing for a timestamp that is in the future
Details:
  TestName: test_future_timestamp
  Description: This test is intended to verify that the function handles timestamps that are in the future.
Execution:
  Arrange: Prepare a timestamp that is in the future relative to the current time.
  Act: Invoke the function get_time_since with the prepared timestamp.
  Assert: Expect an error to be thrown, or a negative time difference to be returned.
Validation:
  This scenario tests how the function handles timestamps that are in the future. It is important because the function needs to handle erroneous inputs gracefully.
"""

# ********RoostGPT********
import pytest
from datetime import datetime, timedelta
from app import get_time_since

class Test_AppGetTimeSince:
    def test_exact_one_year(self):
        timestamp = datetime.now() - timedelta(days=365)
        result = get_time_since(timestamp)
        assert result == '1 Years Ago', "Test Failed: Expected 1 Years Ago"

    def test_less_than_minute(self):
        timestamp = datetime.now() - timedelta(seconds=30)
        result = get_time_since(timestamp)
        assert result == '30 Seconds Ago', "Test Failed: Expected 30 Seconds Ago"

    def test_more_than_a_year(self):
        timestamp = datetime.now() - timedelta(days=500)
        result = get_time_since(timestamp)
        assert result == '1 Years Ago', "Test Failed: Expected 1 Years Ago"

    def test_exact_one_month(self):
        timestamp = datetime.now() - timedelta(days=30)
        result = get_time_since(timestamp)
        assert result == '1 Months Ago', "Test Failed: Expected 1 Months Ago"

    def test_future_timestamp(self):
        timestamp = datetime.now() + timedelta(days=10)
        with pytest.raises(Exception):
            get_time_since(timestamp)
